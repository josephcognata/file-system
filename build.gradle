plugins {
	id 'java'
	id 'application'
	id 'eclipse'	
}

repositories {
	mavenCentral()
}

final def junitJupiterGroup = 'org.junit.jupiter'
final def junitJupiterVersion = '5.6.0'

final def junitPlatformGroup = 'org.junit.platform'
final def junitPlatformVersion = '1.4.0'
 
dependencies {
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
	
    testImplementation(group: junitJupiterGroup, name: 'junit-jupiter-api', version: junitJupiterVersion)    
    testRuntimeOnly(group: junitJupiterGroup, name: 'junit-jupiter-engine', version: junitJupiterVersion)
    testRuntimeOnly(group: junitJupiterGroup, name: 'junit-jupiter-params', version: junitJupiterVersion)

    testRuntimeOnly(group: junitPlatformGroup, name: 'junit-platform-launcher', version: junitPlatformVersion)
    testRuntimeOnly(group: junitPlatformGroup, name: 'junit-platform-runner', version: junitPlatformVersion)
}

// The additional eclipse.gradle that resolves the JUnit dependencies 
eclipse {
    project {
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }

    classpath {
        file {
            whenMerged {
                entries.findAll { isModule(it) }.each { //(1)
                    it.entryAttributes['module'] = 'true'
                }

                entries.findAll { isSource(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }

                entries.findAll { isLibrary(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
            }
        }

        defaultOutputDir = file('build')
        downloadSources = true
        downloadJavadoc = true
    }
}

boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }

boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

task test_node_creation (type: Test) {
	filter.includeTestsMatching "NodeTest.TestCreation"
}

task test_node_chaining (type: Test) {
	filter.includeTestsMatching "NodeTest.TestChaining"
}

task test_fs_basic (type: Test) {
	filter.includeTestsMatching "FileSystemTest.TestBasicCommands"
}

task test_fs_ls (type: Test) {
	filter.includeTestsMatching "FileSystemTest.TestLs"
}

task test_fs_rm (type: Test) {
	filter.includeTestsMatching "FileSystemTest.TestRm"
}

task test_fs_mv (type: Test) {
	filter.includeTestsMatching "FileSystemTest.TestMv"
}


// add more tasks here
tasks.withType(Test)
{
	useJUnitPlatform()
	outputs.upToDateWhen {false}
	testLogging {
		exceptionFormat = 'full'
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
}

sourceSets {
    if (project.gradle.startParameter.taskNames.contains("test_node_creation")) {
        test.java.exclude '**/NodeTest.TestChaining'
        test.java.exclude '**/FileSystemTest.TestRm'
        test.java.exclude '**/FileSystemTest.TestLs'
        test.java.exclude '**/FileSystemTest.TestMv'
        test.java.exclude '**/FileSystemTest.TestBasicCommands'
        
    }
    else if (project.gradle.startParameter.taskNames.contains("test_node_chaining")) {
        test.java.exclude '**/NodeTest.TestCreation'
        test.java.exclude '**/FileSystemTest.TestRm'
        test.java.exclude '**/FileSystemTest.TestLs'
        test.java.exclude '**/FileSystemTest.TestMv'
        test.java.exclude '**/FileSystemTest.TestBasicCommands'
       
    }
    else if (project.gradle.startParameter.taskNames.contains("test_basic_commands")) {
        test.java.exclude '**/NodeTest.TestCreation'
        test.java.exclude '**/NodeTest.TestChaining'
        test.java.exclude '**/FileSystemTest.TestRm'
        test.java.exclude '**/FileSystemTest.TestLs'
        test.java.exclude '**/FileSystemTest.TestMv'
       
    }
    else if (project.gradle.startParameter.taskNames.contains("test_fs_ls")) {
        test.java.exclude '**/NodeTest.TestCreation'
        test.java.exclude '**/NodeTest.TestChaining'
        test.java.exclude '**/FileSystemTest.TestRm'
        test.java.exclude '**/FileSystemTest.TestMv'
        test.java.exclude '**/FileSystemTest.TestBasicCommands'
       
    }
    else if (project.gradle.startParameter.taskNames.contains("test_fs_rm")) {
        test.java.exclude '**/NodeTest.TestCreation'
        test.java.exclude '**/NodeTest.TestChaining'
        test.java.exclude '**/FileSystemTest.TestLs'
        test.java.exclude '**/FileSystemTest.TestMv'
        test.java.exclude '**/FileSystemTest.TestBasicCommands'
    }
    else if (project.gradle.startParameter.taskNames.contains("test_fs_mv")) {
        test.java.exclude '**/NodeTest.TestCreation'
        test.java.exclude '**/NodeTest.TestChaining'
        test.java.exclude '**/FileSystemTest.TestRm'
        test.java.exclude '**/FileSystemTest.TestLs'
        test.java.exclude '**/FileSystemTest.TestBasicCommands'
        }
}

mainClassName = "Main"
sourceSets.main.java.srcDirs = ['src/main/java']

run {
	standardInput = System.in
}
